{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","default","sortOption","setSortOption","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","goodA","goodB","ByAlphabet","localeCompare","ByLength","length","reverse","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,oFAAAA,K,WAAAA,E,iCAAAA,E,2BAAAA,M,KAME,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,IAAMC,EAAgB,WAC3B,MAAoCC,mBAASH,EAASI,SAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,WACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,SACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMcS,CACnBnB,EACAI,EACAE,GAQF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYlB,IAAeL,EAASe,aAExCS,QAAS,kBAAMlB,EAAcN,EAASe,aANxC,SAQGf,EAASe,aAGZ,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYlB,IAAeL,EAASiB,WAExC,gBACAO,QAAS,kBAAMlB,EAAcN,EAASiB,WAPxC,SASGjB,EAASiB,WAGZ,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAahB,IAEjBiB,QAAS,kBAAMhB,GAAc,SAAAW,GAAO,OAAKA,MAN3C,sBAWEd,GAAcE,IAEd,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,kBA9CjBhB,GAAc,QACdF,EAAcN,EAASI,UA0CjB,sBAUJ,6BACE,6BACGK,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cCpHrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.14aaaf63.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nenum SortType {\n  default = '',\n  ByAlphabet = 'Sort alphabetically',\n  ByLength = 'Sort by length',\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortOption: SortType,\n  isReversed: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortOption) {\n    preparedGoods.sort((goodA, goodB) => {\n      switch (sortOption) {\n        case SortType.ByAlphabet:\n          return goodA.localeCompare(goodB);\n\n        case SortType.ByLength:\n          return goodA.length - goodB.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortOption, setSortOption] = useState(SortType.default);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    sortOption,\n    isReversed,\n  );\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortOption(SortType.default);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortOption !== SortType.ByAlphabet },\n          )}\n          onClick={() => setSortOption(SortType.ByAlphabet)}\n        >\n          {SortType.ByAlphabet}\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortOption !== SortType.ByLength },\n          )}\n          is-warning\n          onClick={() => setSortOption(SortType.ByLength)}\n        >\n          {SortType.ByLength}\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(reverse => !reverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortOption || isReversed)\n        && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => reset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}